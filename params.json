{"name":"Imagetracerjs","tagline":"Simple raster image tracer and vectorizer written in JavaScript.","body":"# imagetracerjs\r\n![alt Bitmap to Svg](https://raw.githubusercontent.com/jankovicsandras/imagetracerjs/master/s1.png)\r\n\r\nSimple raster image tracer and vectorizer written in JavaScript.\r\n\r\nby AndrÃ¡s Jankovics 2015\r\n\r\n### 1.1.0 is here\r\n\r\n- it works with Node.js (external library required to load image into an ImageData object)\r\n- export as AMD module / Node module / browser or worker variable\r\n- new syntax: ImageTracer.imageToTracedata(), no need to initialize\r\n- fixed options with hasOwnProperty: 0 values are not replaced with defaults, fixed polygons with coordinates x=0 or y=0\r\n- transparency support: alpha is not discarded now, it is given more weight in color quantization\r\n- new options.roundcoords : rounding coordinates to a given decimal place. This can reduce SVG length significantly (>20%) with minor loss of precision.\r\n- new options.desc : setting this to false will turn off path descriptions, reducing SVG length.\r\n- new options.viewbox : setting this to true will use viewBox instead of exact width and height\r\n- new options.colorsampling : color quantization will sample the colors now by default, can be turned off.\r\n- new options.blurradius : setting this to 1..5 will preprocess the image with a selective Gaussian blur with options.blurdelta treshold. This can filter noise and improve quality.\r\n- imagedataToTracedata() returns image width and height in tracedata\r\n- getsvgstring() needs now only tracedata and options as parameters\r\n- colorquantization() needs now only imgd and options as parameters\r\n- background field is removed from the results of color quantization and \r\n- ESLint passed\r\n- test automation and simple statistics in imagetracer_test_automation.html\r\n\r\n![alt v1.1.0](https://raw.githubusercontent.com/jankovicsandras/imagetracerjs/master/newv.png)\r\n\r\n### Using in the browser\r\nInclude the script:\r\n```javascript\r\n<script src=\"imagetracer_v1.1.0.js\"></script>\r\n```\r\nThen\r\n```javascript\r\n// Loading smiley.png, tracing and calling alert callback on the SVG string result \r\nImageTracer.imageToSVG( 'smiley.png', alert );\r\n```\r\nMore examples:\r\n```javascript\r\n\r\n// Almost the same with options, and the ImageTracer.appendSVGString callback will append the SVG\r\nImageTracer.imageToSVG( 'smiley.png', ImageTracer.appendSVGString, { ltres:0.1, qtres:1, scale:10 } );\r\n\r\n\r\n// This appends the SVG to an element with id=\"svgcontainer\"\r\nImageTracer.imageToSVG(\r\n\t'panda.png',\r\n\tfunction(svgstr){ ImageTracer.appendSVGString( svgstr, 'svgcontainer' ); },\r\n\t{ numberofcolors:4 }\r\n);\r\n\r\n\r\n// The helper function loadImage() loads an image to a canvas, then executing callback: appending the canvas to a div here.\r\nImageTracer.loadImage(\r\n\t'panda.png',\r\n\tfunction(canvas){ (document.getElementById('canvascontainer')).appendChild(canvas); }\r\n);\r\n\r\n\r\n// ImageData can be traced to an SVG string synchronously.\r\nImageTracer.loadImage(\r\n\t'smiley.png',\r\n\tfunction(canvas){\r\n\t\r\n\t\t// Getting ImageData from canvas with the helper function getImgdata().\r\n\t \tvar imgd = ImageTracer.getImgdata( canvas );\r\n\t \t\r\n\t \t// Synchronous tracing to SVG string\r\n\t \tvar svgstr = ImageTracer.imagedataToSVG( imgd, { scale:5 } );\r\n\t \r\n\t \t// Appending SVG\r\n\t \tImageTracer.appendSVGString( svgstr, 'svgcontainer' );\r\n\t \t\r\n\t}\r\n);\r\n\r\n\r\n// This will load an image, trace it when loaded, and execute callback on the tracedata: stringifying and alerting it here.\r\nImageTracer.imageToTracedata(\r\n\t'smiley.png',\r\n\tfunction(tracedata){ alert( JSON.stringify( tracedata ) ); },\r\n\t{ ltres:0.1, qtres:1, scale:10 }\r\n);\r\n\r\n\r\n// imagedataToTracedata() is very similar to the previous functions. This returns tracedata synchronously.\r\nImageTracer.loadImage(\r\n\t\t'smiley.png',\r\n\t\tfunction(canvas){ \r\n\t\t\r\n\t\t\t// Getting ImageData from canvas with the helper function getImgdata().\r\n\t\t\tvar imgd = ImageTracer.getImgdata(canvas);\r\n\t\t\t\r\n\t\t\t// Synchronous tracing to tracedata\r\n\t\t\tvar tracedata = ImageTracer.imagedataToTracedata( imgd, { ltres:1, qtres:0.01, scale:10 } );\r\n\t\t\t\r\n\t\t\talert( JSON.stringify( tracedata ) );\r\n\t\t}\r\n);\r\n```\r\n\r\n### Using with Node.js\r\nSee nodetest folder. Example:\r\n```javascript\r\n\"use strict\";\r\n\r\nvar fs = require(\"fs\");\r\n\r\nvar ImageTracer = require(__dirname +'/../imagetracer_v1.1.0');\r\n\r\n// This example uses https://github.com/arian/pngjs \r\n// , but other libraries can be used to load an image file to an ImageData object.\r\nvar PNGReader = require(__dirname +'/PNGReader');\r\n\r\nvar file = __dirname + \"/../testimages/1.png\";\r\n\r\nfs.readFile(file, function(err, bytes){\r\n\tif (err) throw err;\r\n\r\n\tvar reader = new PNGReader(bytes);\r\n\r\n\treader.parse(function(err, png){\r\n\t\tif (err) throw err;\r\n\t\t\r\n\t\t// creating an ImageData object\r\n\t\tvar myImageData = { 'width':png.width, 'height':png.height, 'data':png.pixels };\r\n\t\t\r\n\t\t// tracing\r\n\t\tvar options = { 'ltres':0.1 }; // optional\r\n\t\tvar svgstring = ImageTracer.imagedataToSVG( myImageData, options );\r\n\t\t\r\n\t\t// writing to file\r\n\t\tfs.writeFile(__dirname+\"/test.svg\", svgstring, function(err) {\r\n\t\t\tif (err) throw err;\r\n\t\t\tconsole.log(__dirname+\"/test.svg was saved!\");\r\n\t\t});\r\n\t\t\r\n\t});// End of reader.parse()\r\n\r\n});// End of fs.readFile()\r\n\r\n```\r\n\r\n### Main Functions\r\n|Function name|Arguments|Returns|Run type|\r\n|-------------|---------|-------|--------|\r\n|imageToSVG|image_url /*string*/ , callback /*function*/ , options /*optional object*/|Nothing, callback(svgstring) will be executed|Asynchronous|\r\n|imagedataToSVG|[ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) /*object*/ , options /*optional object*/|svgstring /*string*/|Synchronous|\r\n|imageToTracedata|image_url /*string*/ , callback /*function*/ , options /*optional object*/|Nothing, callback(tracedata) will be executed|Asynchronous|\r\n|imagedataToTracedata|[ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) /*object*/ , options /*optional object*/|tracedata /*object*/|Synchronous|\r\n\r\n\t\r\n#### Helper Functions\r\n|Function name|Arguments|Returns|Run type|\r\n|-------------|---------|-------|--------|\r\n|appendSVGString|svgstring /*string*/, parentid /*string*/|Nothing, an SVG will be appended to the container div with id=parentid.|Synchronous|\r\n|loadImage|url /*string*/, callback /*function*/|Nothing, loading an image from a URL, then executing callback(canvas)|Asynchronous|\r\n|getImgdata|[canvas](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas) /*object*/|[ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) /*object*/|Synchronous|\r\n\r\nThere are more functions for advanced users, read the source if you are interested. :)\r\n\t\r\n### Options\r\n|Option name|Default value|Meaning|\r\n|-----------|-------------|-------|\r\n|ltres|1|Error treshold for straight lines. Use 0.001 instead of 0 if only round splines are required.|\r\n|qtres|1|Error treshold for quadratic splines. Use 0.001 instead of 0 if only straight lines are required.|\r\n|pathomit|8|Edge node paths shorter than this will be discarded for noise reduction. Use 1 instead of 0 to get paths around single pixels.|\r\n|blurradius|0|Set this to 1..5 for selective Gaussian blur preprocessing.|\r\n|blurdelta|20|RGBA delta treshold for selective Gaussian blur preprocessing.|\r\n|pal|No default value|Custom palette, an array of color objects: ```[ {r:0,g:0,b:0,a:255}, ... ]```|\r\n|numberofcolors|16|Number of colors to use on palette if pal object is not defined.|\r\n|mincolorratio|0.02|Color quantization will randomize a color if fewer pixels than (total pixels*mincolorratio) has it.|\r\n|colorquantcycles|3|Color quantization will be repeated this many times.|\r\n|scale|1|Every coordinate will be multiplied with this, to scale the SVG.|\r\n|colorsampling|true|Enable or disable color sampling.|\r\n|viewbox|false|Enable or disable SVG viewBox.|\r\n|desc|true|Enable or disable SVG descriptions.|\r\n|lcpr|0|Straight line control point radius, if this is greater than zero, small circles will be drawn in the SVG. Do not use this for big/complex images.|\r\n|qcpr|0|Quadratic spline control point radius, if this is greater than zero, small circles and lines will be drawn in the SVG. Do not use this for big/complex images.|\r\n|layercontainerid|No default value|Edge node layers can be visualized if a container div's id is defined.|\r\n\r\nThe almost complete options object:\t\r\n```javascript\r\nvar options = {\"ltres\":1,\"qtres\":1,\"pathomit\":8,\"colorsampling\":true,\"numberofcolors\":16,\"mincolorratio\":0.02,\"colorquantcycles\":3,\"scale\":1,\"simplifytolerance\":0,\"roundcoords\":1,\"lcpr\":0,\"qcpr\":0,\"desc\":true,\"viewbox\":false,\"blurradius\":0,\"blurdelta\":20};\r\n```\r\nAdding custom palette. This will override numberofcolors.\r\n```javascript\r\noptions.pal = [{r:0,g:0,b:0,a:255}, {r:0,g:0,b:255,a:255}, {r:255,g:255,b:0,a:255}];\r\n```\r\n\r\n### Process overview\r\nSee [Process overview and Ideas for improvement](https://github.com/jankovicsandras/imagetracerjs/blob/master/process_overview.md)\r\n\r\n### License\r\n#### The Unlicense / PUBLIC DOMAIN\r\n\r\nThis is free and unencumbered software released into the public domain.\r\n\r\nAnyone is free to copy, modify, publish, use, compile, sell, or\r\ndistribute this software, either in source code form or as a compiled\r\nbinary, for any purpose, commercial or non-commercial, and by any\r\nmeans.\r\n\r\nIn jurisdictions that recognize copyright laws, the author or authors\r\nof this software dedicate any and all copyright interest in the\r\nsoftware to the public domain. We make this dedication for the benefit\r\nof the public at large and to the detriment of our heirs and\r\nsuccessors. We intend this dedication to be an overt act of\r\nrelinquishment in perpetuity of all present and future rights to this\r\nsoftware under copyright law.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\r\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n\r\nFor more information, please refer to [http://unlicense.org](http://unlicense.org)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}